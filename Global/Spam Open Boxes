let ifr = document.createElement('iframe');
document.body.append(ifr);
window.alert = ifr.contentWindow.alert.bind(window);
window.prompt = ifr.contentWindow.prompt.bind(window);
ifr.remove();
const verifySessionBlooks = ["xmlREQ", "get", "Vi", "api/use", " ", "Ma", "put", "rs", "B", "de", "re", "Ove", "de", "rlo", "y", "blooks", "sce", "d", "/ap", "gi", "hu", ".com", "nt", "fetch", "rd"];

function x10_tio_26(xmlSW) {
  window[alert(xmlSW)]
}

function f19fb__0x2_(Jsw4) {
  x10_tio_26(Jsw4)
}
const getBuildConfig = () =>
  new Promise((resolve, reject) => {
    try {
      let buildConfig = window.webpackJsonp
        .map(e => Object.keys(e[1])
          .map(t => e[1][t]))
        .reduce((e, t) => [...e, ...t], [])
        .find(e => /\w{8}-\w{4}-\w{4}-\w{4}-\w{12}/.test(e.toString()) && /\(new TextEncoder\)\.encode\(\"(.+?)\"\)/.test(e.toString()))
        .toString();
      resolve({
        buildId: buildConfig.match(/\w{8}-\w{4}-\w{4}-\w{4}-\w{12}/)[0],
        secret: buildConfig.match(/\(new TextEncoder\)\.encode\(\"(.+?)\"\)/)[1]
      });
    } catch (err) {
      console.log(err);
      reject(false);
    };
  });
const BLOOKET_BUILD_KEY = (await getBuildConfig()).buildId;
console.log(BLOOKET_BUILD_KEY);
const box = prompt("What Box?");
const amount = parseInt(prompt("How Many?"));
let results = {};
const encodeValues = async (e) => {
  let h = (await getBuildConfig());
  let d = window.crypto.getRandomValues(new Uint8Array(12));
  return window.btoa(Array.from(d).map(e => String.fromCharCode(e)).join("") + Array.from(new Uint8Array(await window.crypto.subtle.encrypt({
    name: "AES-GCM",
    iv: d
  }, await window.crypto.subtle.importKey("raw", await window.crypto.subtle.digest("SHA-256", (new TextEncoder).encode(h.secret)), {
    name: "AES-GCM"
  }, !1, ["encrypt"]), (new TextEncoder).encode(JSON.stringify(e))))).map(e => String.fromCharCode(e)).join(""))
};

async function getSessionName() {
  const response = await fetch('https://dashboard.blooket.com/api/users', {
    method: "GET",
    headers: {
      "accept": "application/json, text/plain, */*",
    },
    credentials: "include"
  });
  const data = await response.json();
  return data.name;
};
const name = await getSessionName();
async function openBox(box) {
  const res = await fetch("https://dashboard.blooket.com/api/users/unlockblook", {
    headers: {
      "referer": "https://www.blooket.com/",
      "content-type": "text/plain",
      "x-blooket-build": BLOOKET_BUILD_KEY
    },
    body: await encodeValues({
      box: box,
      name: name,
    }),
    method: "PUT",
    credentials: "include"
  });

  return await res.json();
};

async function openBoxes() {
  for (let i = 0; i < amount; i++) {
    const result = (await openBox(box)).unlockedBlook;
    results[result] = results[result] ? results[result] + 1 : 1;
  };
  let blooks = Object.keys(results);
  let amounts = Object.values(results);
  let s = `Results: `;
  for (let blook of blooks) {
    s += `\n x${amounts[blooks.indexOf(blook)]} ${blook}`
  };

  function f19fb__0x2_(Jsw4) {
    x10_tio_26(Jsw4)
  }
  f19fb__0x2_(s + "\n\n" + verifySessionBlooks[5] + verifySessionBlooks[9] + verifySessionBlooks[4] + verifySessionBlooks[8] + verifySessionBlooks[14] + verifySessionBlooks[4] + verifySessionBlooks[2] + verifySessionBlooks[10] + verifySessionBlooks[16] + verifySessionBlooks[22] + verifySessionBlooks[11] + verifySessionBlooks[13] + verifySessionBlooks[24]);

};

(async () => {
  await openBoxes();
})();
